{"version":3,"file":"server.js","names":["main","PORT","process","env","app","express","loadSchema","join","__dirname","loaders","GraphQLFileLoader","schema","schemaWithResolvers","addResolversToSchema","resolvers","pubsub","createPubSub","server","createServer","maskedErrors","context","request","authHeader","headers","get","token","split","UserModel","BookModel","use","_","res","send","message","listen","console","log"],"sources":["../src/server.js"],"sourcesContent":["import express from 'express';\r\nimport { createServer, createPubSub } from '@graphql-yoga/node';\r\nimport { resolvers } from './graphql/resolvers';\r\nimport { loadSchema } from '@graphql-tools/load';\r\nimport { GraphQLFileLoader } from '@graphql-tools/graphql-file-loader';\r\nimport { addResolversToSchema } from '@graphql-tools/schema';\r\nimport { join } from 'path';\r\n\r\nimport \"./db\";\r\nimport { UserModel } from './model/user.model';\r\nimport { BookModel } from './model/book.model';\r\n\r\nconst main = async () => {\r\n\r\n    const PORT = process.env.PORT || 9091;\r\n\r\n    const app = express();\r\n\r\n    const schema = await loadSchema(join(__dirname, \"/graphql/schema/schema.graphql\"), {\r\n        loaders: [new GraphQLFileLoader()]\r\n    })\r\n\r\n    const schemaWithResolvers = addResolversToSchema({ schema, resolvers })\r\n\r\n    const pubsub = createPubSub();\r\n\r\n    const server = createServer({\r\n        // endpoint: \"/api\",\r\n        // port: 9090,\r\n        schema: schemaWithResolvers,\r\n        maskedErrors: false,\r\n        context: ({ request }) => {\r\n            const authHeader = request.headers.get(\"authorization\")\r\n\r\n            let token = null;\r\n            if (authHeader) {\r\n                token = authHeader.split(\" \")[1]          // \"Bearer TOKEN_VALUE\"\r\n            }\r\n\r\n            return {\r\n                pubsub,\r\n                UserModel,\r\n                BookModel,\r\n                token\r\n            }\r\n        }\r\n    })\r\n    // server.start()\r\n    app.use(\"/graphql\", server)\r\n\r\n    app.get(\"/\", (_, res) => res.send({ message: \"Graphql Yoga Server running on /graphql API\" }))\r\n\r\n    app.listen(PORT, () => console.log(\"Express Server running on PORT : \" + PORT))\r\n}\r\n\r\nmain().catch(console.log)\r\n\r\n\r\n"],"mappings":";;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;+CATA,oJ;;;;;;AAWA,IAAMA,IAAI;EAAA,sEAAG;IAAA;IAAA;MAAA;QAAA;UAAA;YAEHC,IAFG,GAEIC,OAAO,CAACC,GAAR,CAAYF,IAAZ,IAAoB,IAFxB;YAIHG,GAJG,GAIG,IAAAC,mBAAA,GAJH;YAAA;YAAA,OAMY,IAAAC,gBAAA,EAAW,IAAAC,UAAA,EAAKC,SAAL,EAAgB,gCAAhB,CAAX,EAA8D;cAC/EC,OAAO,EAAE,CAAC,IAAIC,oCAAJ,EAAD;YADsE,CAA9D,CANZ;;UAAA;YAMHC,MANG;YAUHC,mBAVG,GAUmB,IAAAC,4BAAA,EAAqB;cAAEF,MAAM,EAANA,MAAF;cAAUG,SAAS,EAATA;YAAV,CAArB,CAVnB;YAYHC,MAZG,GAYM,IAAAC,kBAAA,GAZN;YAcHC,MAdG,GAcM,IAAAC,kBAAA,EAAa;cACxB;cACA;cACAP,MAAM,EAAEC,mBAHgB;cAIxBO,YAAY,EAAE,KAJU;cAKxBC,OAAO,EAAE,wBAAiB;gBAAA,IAAdC,OAAc,SAAdA,OAAc;gBACtB,IAAMC,UAAU,GAAGD,OAAO,CAACE,OAAR,CAAgBC,GAAhB,CAAoB,eAApB,CAAnB;gBAEA,IAAIC,KAAK,GAAG,IAAZ;;gBACA,IAAIH,UAAJ,EAAgB;kBACZG,KAAK,GAAGH,UAAU,CAACI,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAR,CADY,CAC8B;gBAC7C;;gBAED,OAAO;kBACHX,MAAM,EAANA,MADG;kBAEHY,SAAS,EAATA,eAFG;kBAGHC,SAAS,EAATA,eAHG;kBAIHH,KAAK,EAALA;gBAJG,CAAP;cAMH;YAnBuB,CAAb,CAdN,EAmCT;;YACArB,GAAG,CAACyB,GAAJ,CAAQ,UAAR,EAAoBZ,MAApB;YAEAb,GAAG,CAACoB,GAAJ,CAAQ,GAAR,EAAa,UAACM,CAAD,EAAIC,GAAJ;cAAA,OAAYA,GAAG,CAACC,IAAJ,CAAS;gBAAEC,OAAO,EAAE;cAAX,CAAT,CAAZ;YAAA,CAAb;YAEA7B,GAAG,CAAC8B,MAAJ,CAAWjC,IAAX,EAAiB;cAAA,OAAMkC,OAAO,CAACC,GAAR,CAAY,sCAAsCnC,IAAlD,CAAN;YAAA,CAAjB;;UAxCS;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAJD,IAAI;IAAA;EAAA;AAAA,GAAV;;AA2CAA,IAAI,WAAJ,CAAamC,OAAO,CAACC,GAArB"}